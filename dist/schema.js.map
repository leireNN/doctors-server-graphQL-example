{"version":3,"sources":["../src/schema.js"],"names":["require","config","doctors","id","name","lastName","patients","doctor","typeDefs","gql","resolvers","Query","hello","root","args","context","filter","Doctor","info","doctorId","patient"],"mappings":";;;;;;;;;;42BAAA;AACA;;;AACA;;AAEA;;;;;;AACAA,QAAQ,QAAR,EAAkBC,MAAlB;;AAEA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,WAAU,CACd,EAAEC,IAAI,CAAN,EAASC,MAAM,OAAf,EAAwBC,UAAU,KAAlC,EADc,EAEd,EAAEF,IAAI,CAAN,EAASC,MAAM,KAAf,EAAsBC,UAAU,KAAhC,EAFc,CAAhB;;AAKA,IAAMC,YAAW,CACf,EAAEH,IAAI,CAAN,EAASC,MAAM,OAAf,EAAwBC,UAAU,MAAlC,EAA0CE,QAAQ,CAAlD,EADe,EAEf,EAAEJ,IAAI,CAAN,EAASC,MAAM,OAAf,EAAwBC,UAAU,KAAlC,EAAyCE,QAAQ,CAAjD,EAFe,CAAjB;;AAKA;;AAEA,IAAMC,eAAWC,wBAAX,kBAAN;;AAyBA;AACA,IAAMC,YAAY;AAChBC,SAAO;AACLC,WAAO,eAACC,IAAD,EAAOC,IAAP,EAAaC,OAAb,EAAyB;AAC9B,aAAO,cAAP;AACD,KAHI;AAILb,aAAS;AAAA,aAAMA,QAAN;AAAA,KAJJ;AAKLK,YAAQ,gBAACM,IAAD,QAAeE,OAAf;AAAA,UAASZ,EAAT,QAASA,EAAT;AAAA,aACND,SAAQc,MAAR,CAAe;AAAA,eAAUT,OAAOJ,EAAP,IAAaA,EAAvB;AAAA,OAAf,EAA0C,CAA1C,CADM;AAAA,KALH;AAOLG,cAAU,kBAACO,IAAD,SAAiBE,OAAjB;AAAA,UAASX,IAAT,SAASA,IAAT;AAAA,aAA6BE,SAA7B;AAAA;AAPL,GADS;AAUhBW,UAAQ;AACNX,cAAU,kBAACO,IAAD,SAAiBE,OAAjB,EAA0BG,IAA1B,EAAmC;AAAA,UAA1Bd,IAA0B,SAA1BA,IAA0B;;AAC3C,UAAMe,WAAWjB,SAAQc,MAAR,CAAe;AAAA,eAAUT,OAAOH,IAAP,IAAeA,IAAzB;AAAA,OAAf,EAA8C,CAA9C,EAAiDD,EAAlE;AACA,aAAOG,UAASU,MAAT,CAAgB;AAAA,eAAWI,QAAQb,MAAR,IAAkBY,QAA7B;AAAA,OAAhB,CAAP;AACA;AACD;AAEH;AACA;AACA;AATQ,GAVQ,EAAlB;;AAsBA;kBACe;AACbX,oBADa;AAEbE;AAFa,C;;AAKf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"schema.js","sourcesContent":["// graphql-tools combines a schema string with resolvers.\n// import { makeExecutableSchema } from 'graphql-tools'\nimport { gql } from \"apollo-server-express\";\n\nimport fetch from \"node-fetch\";\nrequire(\"dotenv\").config();\n\n// const doctors = {\n//   1: {\n//     name: 'Jason',\n//   },\n// }\n\nconst doctors = [\n  { id: 1, name: \"Jason\", lastName: \"Foo\" },\n  { id: 2, name: \"Bar\", lastName: \"Bar\" }\n];\n\nconst patients = [\n  { id: 1, name: \"Leire\", lastName: \"Polo\", doctor: 2 },\n  { id: 2, name: \"Alice\", lastName: \"Mao\", doctor: 1 }\n];\n\n// Construct a schema, using GraphQL schema language\n\nconst typeDefs = gql`\n  type Query {\n    hello: String\n    doctor(id: Int): Doctor\n    doctor(name: String): Doctor\n    doctors: [Doctor]\n    patients: [Patient]\n  }\n\n  type Doctor {\n    # A nice name\n    name: String\n    lastName: String\n    patients(name: String): [Patient]\n  }\n\n  type Patient {\n    # A nice name\n    name: String\n    lastName: String\n    doctor: Int\n    # doctors: [Doctors]\n  }\n`;\n\n// Provide resolver functions for your schema fields\nconst resolvers = {\n  Query: {\n    hello: (root, args, context) => {\n      return \"Hello world!\";\n    },\n    doctors: () => doctors,\n    doctor: (root, { id }, context) =>\n      doctors.filter(doctor => doctor.id == id)[0],\n    patients: (root, { name }, context) => patients\n  },\n  Doctor: {\n    patients: (root, { name }, context, info) => {\n      const doctorId = doctors.filter(doctor => doctor.name == name)[0].id;\n      return patients.filter(patient => patient.doctor == doctorId);\n      // return patients;\n    }\n  }\n  // Patient: {\n  //   patients: (root, args, context, info) => [{ name: \"Foo\" }]\n  // }\n};\n\n// Required: Export the GraphQL.js schema object as \"schema\"\nexport default {\n  typeDefs,\n  resolvers\n};\n\n// Optional: Export a function to get context from the request. It accepts two\n// parameters - headers (lowercased http headers) and secrets (secrets defined\n// in secrets section). It must return an object (or a promise resolving to it).\n// export function context(headers, secrets) {\n//   return {\n//     headers,\n//     secrets,\n//   };\n// };\n\n// Optional: Export a root value to be passed during execution\n// export const rootValue = {};\n\n// Optional: Export a root function, that returns root to be passed\n// during execution, accepting headers and secrets. It can return a\n// promise. rootFunction takes precedence over rootValue.\n// export function rootFunction(headers, secrets) {\n//   return {\n//     headers,\n//     secrets,\n//   };\n// };\n"]}