{"version":3,"sources":["../src/server.js"],"names":["apolloServer","ApolloServer","Schema","app","applyMiddleware","listen","port","console","log","graphqlPath"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AAEA;;;;;;AAEA;;AAEA,IAAMA,eAAe,IAAIC,iCAAJ,CAAiBC,gBAAjB,CAArB;AACA,IAAMC,MAAM,wBAAZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAH,aAAaI,eAAb,CAA6B,EAAED,QAAF,EAA7B;;AAEAA,IAAIE,MAAJ,CAAW,EAAEC,MAAM,IAAR,EAAX,EAA2B;AAAA,SACzBC,QAAQC,GAAR,wDAC6CR,aAAaS,WAD1D,CADyB;AAAA,CAA3B","file":"server.js","sourcesContent":["import express from \"express\";\nimport bodyParser from \"body-parser\";\nimport { ApolloServer } from \"apollo-server-express\";\n\nimport Schema from \"./schema\";\n\n// const PORT = 3000;\n\nconst apolloServer = new ApolloServer(Schema);\nconst app = express();\n\n// const schemaFunction =\n//   Schema.schemaFunction ||\n//   function() {\n//     return Schema.schema\n//   }\n// let schema\n// const rootFunction =\n//   Schema.rootFunction ||\n//   function() {\n//     return schema.rootValue\n//   }\n// const contextFunction =\n//   Schema.context ||\n//   function(headers, secrets) {\n//     return Object.assign(\n//       {\n//         headers: headers,\n//       },\n//       secrets,\n//     )\n//   }\n\napolloServer.applyMiddleware({ app });\n\napp.listen({ port: 3000 }, () =>\n  console.log(\n    `ðŸš€ Server ready at http://localhost:3000${apolloServer.graphqlPath}`\n  )\n);\n"]}